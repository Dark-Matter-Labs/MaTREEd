{"version":3,"sources":["Viewer.js","Simulator.js","App.js","index.js"],"names":["madridCenter","Tooltip","closeTooltip","style","properties","perc_caducifolio","perc_perennifolio","tree_valid","tree_tot","especie_1","especie_1_perc","especie_2","especie_2_perc","especie_3","especie_3_perc","other_perc","sum_c_stock","sum_c_seq","CODBARRIO","NOMBRE","treeData","treeSpecies","carbonInfo","Math","round","className","map","name","val","to","onClick","App","useState","tooltipVisible","setTooltipVisible","setProperties","layerH","setLayerH","left","id","MapContainer","center","zoom","scrollWheelZoom","TileLayer","attribution","url","GeoJSON","onEachFeature","layer","eventHandlers","click","e","a","console","log","feature","data","pathOptions","color","mcg","L","markerClusterGroup","Simulator","URLSearchParams","useLocation","search","get","currentJSON","setCurrentJSON","currentJSONRef","useRef","mapRef","useEffect","fileName","fetch","then","res","json","current","bounds","getBounds","fitBounds","MarkerCluster","markers","clearLayers","features","forEach","geometry","marker","LatLng","coordinates","addTo","addLayer","MapConsumer","basename","exact","path","component","Viewer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.49ac6905.chunk.js","sourcesContent":["import {useState} from 'react';\nimport './App.css';\nimport {MapContainer, TileLayer, GeoJSON} from 'react-leaflet'\nimport data from './app_data/neighborhoods_madrid_stats.json'\nimport {Link} from \"react-router-dom\";\nconst madridCenter = [40.475, -3.70];\n\n\nconst Tooltip = ({closeTooltip, style, properties}) =>{\n  \n  if(!properties){\n    return null\n  }\n  const {perc_caducifolio, perc_perennifolio, tree_valid, tree_tot,\n    especie_1, especie_1_perc, \n    especie_2, especie_2_perc,\n    especie_3, especie_3_perc,\n    other_perc,\n    sum_c_stock, sum_c_seq,\n    CODBARRIO,\n    NOMBRE,\n  } = properties;\n\n  const treeData=[\n     ['TREES COUNT',tree_tot],\n     ['VALID TREE RECORDS',tree_valid+'%'],\n     ['EVERGREEN',perc_perennifolio+'%'],\n     ['DECIDUOUS',perc_caducifolio+'%'],\n  ]\n\n  const treeSpecies=[\n    [ especie_1,especie_1_perc],\n    [ especie_2,especie_2_perc],\n    [ especie_3,especie_3_perc],\n    ['others',other_perc],\n ]\n\n const carbonInfo=[\n  ['CO2 stock ', Math.round(sum_c_stock*100)/100+' Kg'],\n  ['CO2 sequestration',Math.round(sum_c_seq*100)/100+' Kg/y'],\n]\n  return(\n    <div style={style} className='tooltip'>\n        <div className='singleRow'>\n          <p>{NOMBRE}</p>\n        </div>\n      {treeData.map(([name,val])=>(\n        <div className='row'>\n          <p>{name}</p>\n          <p>{val}</p>\n        </div>\n      ))}\n        <div className='singleRow'>\n          <p>TREE SPECIES</p>\n        </div>\n        {treeSpecies.map(([name,val])=>(\n        <div className='row'>\n          <p>{name}</p>\n          <p>{val}%</p>\n        </div>\n        ))}\n       <div className='singleRow'>\n          <p>CO2 PERFORMANCE</p>\n        </div>\n          {carbonInfo.map(([name,val])=>(\n          <div className='row'>\n            <p>{name}</p>\n            <p>{val}</p>\n          </div>\n      ))}\n    <Link to={`/simulator?id=${CODBARRIO}`}>\n      <button className='blueButton goToSimulator'>View in Simulator</button>\n    </Link>\n    <button className='blueButton closeButton' onClick={closeTooltip}>Close</button>\n    \n    </div>\n  )\n}\n\nconst App = ()=> {\n  const [tooltipVisible, setTooltipVisible] = useState(false)\n  const [properties, setProperties]= useState(null)\n  const [layerH, setLayerH]= useState(null)\n  const left = tooltipVisible?'0px':'-100%';\n  return (\n  <div id='container'>\n    <div className='pageName'>MaTREEd Viewer\n    <Link to=\"/simulator\">\n       <button className='blueButton linkButton'>Go to Simulator</button>\n      </Link>\n    </div>\n     <Tooltip \n     properties={properties}\n     style={{ left: left}}\n     closeTooltip={()=>setTooltipVisible(false)}>\n    </Tooltip>\n\n    <MapContainer id='mapContainer' center={madridCenter} zoom={11} scrollWheelZoom={false}>\n  \n          <TileLayer\n            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          />\n          <GeoJSON \n          onEachFeature={ layer => {}}\n          eventHandlers={{\n            click: async(e) => {\n              console.log('marker clicked', e.layer.feature)\n              setProperties(e.layer.feature.properties)\n              setLayerH(e.layer.feature)\n              setTooltipVisible(true)\n            },\n          }}\n          key={'madrid'} data={data} />\n          {tooltipVisible && layerH && (\n            <GeoJSON \n            pathOptions={{color:'red'}}\n            key={layerH.properties.NOMBRE} data={layerH} />\n          )}\n    </MapContainer>\n  </div>\n  )}\nexport default App;\n","import './App.css';\nimport {MapContainer, TileLayer, useLeaflet, MapConsumer} from 'react-leaflet'\nimport data from './app_data/neighborhoods_madrid_stats.json'\nimport {Link, useLocation} from \"react-router-dom\";\nimport { useEffect, useState, useRef } from 'react';\nimport L from \"leaflet\";\nimport \"leaflet.markercluster/dist/leaflet.markercluster\";\n\nconst madridCenter = [40.475, -3.70];\n\nconst useQuery= ()=> {\n  return new URLSearchParams(useLocation().search);\n}\n\nconst mcg = L.markerClusterGroup();\n\n\nconst Simulator = ()=> {\n  let query = useQuery();\n  const id = query.get(\"id\")\n  const [currentJSON, setCurrentJSON] = useState(data);\n  const currentJSONRef = useRef(null);\n  const mapRef = useRef(null);\n\n  useEffect(()=>{\n  if(id){\n              const fileName = `MaTREEd/app_data/trees_neighbours/T_CODBARRIO_${id}.json`;\n              console.log(fileName)\n              fetch(fileName)\n                .then(res=>res.json())\n                .then(data=>{\n                  setCurrentJSON(data)\n                  if(currentJSONRef.current){\n                    const bounds = currentJSONRef.current.getBounds()\n                    console.log(bounds)\n                    mapRef.current.fitBounds(bounds)\n                  }\n                });\n  }\n},[id])\n\nconst MarkerCluster = ({ markers, map }) => {\n\n\n  useEffect(() => {\n    if(markers.name==\"neighborhoods_madrid_stats\"){return}\n    mcg.clearLayers();\n    markers?.features.forEach((feature) =>{\n      console.log('mdata: ', feature.geometry)\n      return L.marker(new L.LatLng(feature.geometry.coordinates[1],feature.geometry.coordinates[0]), {\n    \n      })\n        .addTo(mcg)\n    });\n\n    // optionally center the map around the markers\n    // map.fitBounds(mcg.getBounds());\n    // // add the marker cluster group to the map\n    map.addLayer(mcg);\n  }, [markers, map]);\n\n  return null;\n};\n\nconsole.log(currentJSON, 'currentJSON')\n\n  return (\n  <div id='container'>\n    <div className='pageName'>MaTREEd Simulator\n    <Link to=\"/\">\n       <button className='blueButton linkButton'>Go to Viewer</button>\n      </Link>\n    </div>\n    <MapContainer id='mapContainer' center={madridCenter} zoom={11} scrollWheelZoom={false}>\n    <MapConsumer>\n        {(map) => {\n          mapRef.current=map;\n      return(\n         <>\n          <TileLayer\n            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          />\n           <MarkerCluster map={map} markers={currentJSON} />\n          {/* <GeoJSON \n          ref={currentJSONRef}\n          onEachFeature={ layer => {}}\n          eventHandlers={{\n            click: async(e) => {\n              console.log('marker clicked', e.layer?.feature?.properties?.CODBARRIO)\n\n              const CODBARRIO = e.layer?.feature?.properties?.CODBARRIO;\n              if(!CODBARRIO){return}\n              const fileName = `MaTREEd/app_data/trees_neighbours/T_CODBARRIO_${CODBARRIO}.json`;\n\n              fetch(fileName)\n                .then(res=>res.json())\n                .then(data=>{\n                  setCurrentJSON(data)\n                  if(currentJSONRef.current){\n                    const bounds = currentJSONRef.current.getBounds()\n                    console.log(bounds)\n                    map.fitBounds(bounds)\n                  }\n                });\n            },\n          }}\n          key={currentJSON.name} data={currentJSON} /> */}\n          </>\n        )}}\n      </MapConsumer>\n    </MapContainer>\n  </div>\n  )\n  }\nexport default Simulator;\n","import {\n  HashRouter,\n  Route,\n} from \"react-router-dom\";\nimport Viewer from './Viewer'\nimport Simulator from './Simulator'\n\nexport default function App() {\n  return (\n    <HashRouter basename='/'>\n     <Route exact path=\"/\" component={Viewer} />\n     <Route path=\"/simulator\" component={Simulator} />\n   </HashRouter>\n  );\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}