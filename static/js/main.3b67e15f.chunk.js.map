{"version":3,"sources":["static/legends.js","components/Legend.js","components/Tooltip.js","components/Simulator.js","Viewer.js","App.js","index.js"],"names":["legends","tree_tot_n","label","colorMap","avg_trunk_girth","avg_height","avg_crown_diameter","tree_cover","sum_c_stock_n","sum_c_seq_n","getColorForLegend","val","colorItem","find","item","length","Legend","legendValue","setLegendValue","legendItem","len","className","map","index","style","backgroundColor","Object","entries","onClick","Tooltip","closeTooltip","properties","openSimulator","perc_caducifolio","perc_perennifolio","tree_valid","tree_tot","especie_1","especie_1_perc","especie_2","especie_2_perc","especie_3","especie_3_perc","other_perc","sum_c_stock","sum_c_seq","NOMBRE","treeData","treeSpecies","carbonInfo","Math","round","name","Simulator","visible","onClose","useState","coniferNumber","setConiferNumber","broadleafNumber","setBroadleafNumber","co2Initial","setCo2Initial","coniferCm","setConiferCm","broadleafCm","setBroadleafCm","sequestration","setSequestration","useEffect","sequestrationValue","get_co2","senescence","cm","pow","co2_initial","get_t1","diameter_t0","log","simulate","height","type","placeholder","value","onChange","event","Number","target","isInteger","isNaN","madridCenter","App","tooltipVisible","setTooltipVisible","setProperties","layerH","setLayerH","simulatorVisible","setSimulatorVisible","left","id","MapContainer","center","zoom","scrollWheelZoom","TileLayer","attribution","url","GeoJSON","feature","fillColor","weight","opacity","color","dashArray","fillOpacity","eventHandlers","click","e","a","layer","data","pathOptions","basename","exact","path","component","Viewer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3b67e15f.chunk.js","sourcesContent":["const legends = {\n    tree_tot_n: {\n      label: \"Tree density [trees/kmÂ²]\",\n      colorMap:[\n         [7566, '#00441b'],\n         [4090, '#2a924a'],\n         [3147, '#7bc87c'],\n         [2473, '#caeac3'],\n         [1761, '#f7fcf5'],\n      ]\n    },\n    avg_trunk_girth: {\n      label: \"Mean tree trunk girth [m]\",\n      colorMap:[\n        [0.943, '#a6611a'],\n        [0.751, '#dfc27d'],\n        [0.677, '#f5f5f5'],\n        [0.625, '#80cdc1'],\n        [0.55, '#018571'],\n      ]\n    },\n    avg_height: {\n      label: \"Mean tree height [m]\",\n      colorMap:[\n        [11.6, '#bd0026'],\n        [9.18, '#f03b20'],\n        [8.41, '#fd8d3c'],\n        [7.71, '#fecc5c'],\n        [6.93, '#ffffb2'],\n      ]\n    },\n    avg_crown_diameter: {\n      label: \"Mean tree canopy diameter [m]\",\n      colorMap:[\n        [7.26, '#810f7c'],\n        [5.61, '#8856a7'],\n        [5.19, '#8c96c6'],\n        [4.7,  '#b3cde3'],\n        [4.02, '#edf8fb'],\n      ]\n    },\n    tree_cover: {\n      label: \"Tree canopy coverage [area %]\",\n      colorMap:[\n        [23.4, '#006837'],\n        [11.8, '#31a354'],\n        [8.7, '#78c679'],\n        [5.8, '#c2e699'],\n        [2.8, '#ffffcc'],\n      ]\n    },\n    sum_c_stock_n: {\n      label: \"COâ stock [kg/kmÂ²]\",\n      colorMap: [\n        [4040511, '#440154'],\n        [1516593, '#3a528b'],\n        [1143824, '#20908d'],\n        [814971, '#5dc962'],\n        [423571, '#fde725'],\n      ],\n    },\n    sum_c_seq_n: {\n      label: \"COâ sequestration [kg/y/kmÂ²]\",\n      colorMap: [\n        [152135, '#d7191c'],\n        [61540, '#fdae61'],\n        [46681, '#ffffbf'],\n        [34481, '#abdda4'],\n        [17924, '#2b83ba'],\n      ],\n    },\n  };\n\n  export default legends;\n","import legends from \"../static/legends\";\n\nconst Legend = ({ legendValue, setLegendValue }) => {\n  const legendItem = legends?.[legendValue]?.label;\n  const colorMap = legends?.[legendValue]?.colorMap;\n  const len = legends?.[legendValue]?.colorMap.length;\n\n  return (\n    <div className=\"legendContainer\">\n      <div>\n        <h2>MAPS</h2>\n      </div>\n      <div className=\"legendTitle\">{legendItem}</div>\n      <div className=\"selectedLegend\">\n        {colorMap?.map((item, index) => (\n          <div key={index}>\n            <div className=\"legendVal\">\n              {`${colorMap[len-index + 1-1]?.[0] || 0}-${colorMap[len-index-1][0]}`}\n            </div>\n            <div\n              className=\"legendColor\"\n              style={{ backgroundColor: colorMap[len-index-1][1] || item[0] }}\n            />\n          </div>\n        ))}\n      </div>\n      {Object.entries(legends).map(\n        (item) =>\n          item[0] !== legendValue && (\n            <div\n              key={item[1].label}\n              className=\"legendTitle otherLegend\"\n              onClick={() => setLegendValue(item[0])}\n            >\n              {item[1].label}\n            </div>\n          )\n      )}\n    </div>\n  );\n};\n\nconst getColorForLegend = (val, colorMap) => {\n  if (!colorMap) {\n    return;\n  }\n  const colorItem = colorMap.find((item) => val > item[0]);\n\n  return colorItem && colorItem[1]\n    ? colorItem[1]\n    : colorMap[colorMap.length - 1][1];\n};\n\nexport { getColorForLegend };\nexport default Legend;\n","const Tooltip = ({ closeTooltip, style, properties, openSimulator }) => {\n  if (!properties) {\n    return null;\n  }\n  const {\n    perc_caducifolio,\n    perc_perennifolio,\n    tree_valid,\n    tree_tot,\n    especie_1,\n    especie_1_perc,\n    especie_2,\n    especie_2_perc,\n    especie_3,\n    especie_3_perc,\n    other_perc,\n    sum_c_stock,\n    sum_c_seq,\n    NOMBRE,\n  } = properties;\n\n  const treeData = [\n    [\"TREES COUNT\", tree_tot],\n    [\"VALID TREE RECORDS\", tree_valid + \"%\"],\n    [\"EVERGREEN\", perc_perennifolio + \"%\"],\n    [\"DECIDUOUS\", perc_caducifolio + \"%\"],\n  ];\n\n  const treeSpecies = [\n    [especie_1, especie_1_perc],\n    [especie_2, especie_2_perc],\n    [especie_3, especie_3_perc],\n    [\"others\", other_perc],\n  ];\n\n  const carbonInfo = [\n    [\"COâ stock \", Math.round(sum_c_stock)+ \" kg\"],\n    [\"COâ sequestration\", Math.round(sum_c_seq)+ \" kg/y\"],\n  ];\n  return (\n    <div style={style} className=\"tooltip\">\n      <div className=\"singleRow\">\n        <p>{NOMBRE}</p>\n      </div>\n      {treeData.map(([name, val]) => (\n        <div className=\"row\" key={name}>\n          <p>{name}</p>\n          <p>{val}</p>\n        </div>\n      ))}\n      <div className=\"singleRow\">\n        <p>TREE SPECIES</p>\n      </div>\n      {treeSpecies.map(([name, val]) => (\n        <div className=\"row\" key={name}>\n          <p>{name}</p>\n          <p>{val}%</p>\n        </div>\n      ))}\n      <div className=\"singleRow\">\n        <p>COâ PERFORMANCE</p>\n      </div>\n      {carbonInfo.map(([name, val]) => (\n        <div className=\"row\" key={name}>\n          <p>{name}</p>\n          <p>{val}</p>\n        </div>\n      ))}\n\n      <p className=\"disclaimer\">\n        Carbon computation is based on approximate equations.\n        Results are not intended for analytical purposes.\n      </p>\n      <button className=\"blueButton goToSimulator\" onClick={openSimulator}>\n        Run Simulation\n      </button>\n      <button className=\"blueButton closeButton\" onClick={closeTooltip}>\n        Close\n      </button>\n    </div>\n  );\n};\n\nexport default Tooltip;\n","import { useState, useEffect } from \"react\";\nconst Simulator = ({ visible, onClose, properties }) => {\n  const [coniferNumber, setConiferNumber] = useState(0);\n  const [broadleafNumber, setBroadleafNumber] = useState(0);\n  const [co2Initial, setCo2Initial] = useState(0);\n\n  const [coniferCm, setConiferCm] = useState('');\n  const [broadleafCm, setBroadleafCm] = useState('');\n\n  const [sequestration, setSequestration] = useState(null);\n  \n  const changeConiferNumber = (event) => {\n    const value = Number(event.target.value) || null;\n    if (Number.isInteger(value)) {\n      setConiferNumber(value);\n    }else{\n        setConiferNumber('');\n    }\n  };\n  const changeBroadleafNumber = (event) => {\n    const value = Number(event.target.value) || null;\n    if (Number.isInteger(value)) {\n      setBroadleafNumber(value);\n    }else{\n        setBroadleafNumber('');\n    }\n  };\n\n  const changeConiferCm = (event) => {\n    const value = Number(event.target.value) || null;\n    if (Number.isInteger(value)) {\n      setConiferCm(value);\n    }else{\n        setConiferCm('');\n    }\n  };\n  const changeBroadleafCm = (event) => {\n    const value = Number(event.target.value) || null;\n    if (Number.isInteger(value)) {\n      setBroadleafCm(value);\n    }else{\n        setBroadleafCm('');\n    }\n  };\n\n  const simulate = () => {\n    const get_co2 = (senescence, cm) => {\n        if (!senescence || !cm) {\n            return 0;\n        }\n        if (senescence === \"evergreen\") { //perennifolio\n          return 0.16155 * Math.pow(cm, 2.310647) * 0.5 * 3.67;\n        }\n        if (senescence === \"deciduous\") { //caducifolio\n        return 0.035702 * Math.pow(cm, 2.580671) * 0.5 * 3.67;\n      }\n    };\n    const co2_initial_conifer = get_co2(\"evergreen\", coniferCm) * coniferNumber;\n    const co2_initial_broadleaf = get_co2(\"deciduous\", broadleafCm) * broadleafNumber;\n\n    const co2_initial = co2_initial_conifer + co2_initial_broadleaf;\n    setCo2Initial(co2_initial);\n\n    const get_t1 = (diameter_t0) => {\n      if (!diameter_t0) {\n        return 0;\n      }\n      return diameter_t0 + (-0.5425 + 0.3189 * Math.log(diameter_t0));\n    };\n\n    const co2_final_conifer =get_co2(\"evergreen\", get_t1(coniferCm)) * coniferNumber;\n\n    const co2_final_broadleaf =get_co2(\"deciduous\", get_t1(broadleafCm)) * broadleafNumber;\n\n    const co2_final = co2_final_conifer + co2_final_broadleaf;\n\n    const sequestrationValue = co2_final - co2_initial;\n\n    return Math.round(sequestrationValue);\n  };\n\n  useEffect(() => {\n    const sequestrationValue = simulate();\n    if(sequestrationValue){\n    setSequestration(sequestrationValue);\n    }\n  }, [coniferNumber, broadleafNumber, coniferCm, broadleafCm]);\n\n  if (!properties) {\n    return null;\n  }\n\n  const { tree_valid, sum_c_seq, sum_c_stock, NOMBRE } = properties;\n\n  return (\n    <div className=\"simulator\" style={{ height: visible ? \"100%\" : \"0px\" }}>\n      <div>\n        <div className=\"singleRow\">\n          <p>Simulator - {NOMBRE}</p>\n        </div>\n\n        <table className=\"greenRows\">\n          <thead>\n            <tr>\n              <th>Type</th>\n              <th>Number of trees</th>\n              <th>Diameter [cm]</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td>Evergreen</td>\n              <td>\n                <input\n                  type=\"number\"\n                  placeholder=\"number\"\n                  name=\"coniferNumber\"\n                  value={coniferNumber}\n                  onChange={changeConiferNumber}\n                />\n              </td>\n              <td>\n                <input\n                  type=\"number\"\n                  placeholder=\"cm\"\n                  name=\"coniferDiameter\"\n                  value={coniferCm}\n                  onChange={changeConiferCm}\n                />\n              </td>\n            </tr>\n            <tr>\n              <td>Deciduous</td>\n              <td>\n                <input\n                  type=\"number\"\n                  placeholder=\"number\"\n                  name=\"broadleafNumber\"\n                  value={broadleafNumber}\n                  onChange={changeBroadleafNumber}\n                />\n              </td>\n              <td>\n                <input\n                  type=\"number\"\n                  placeholder=\"cm\"\n                  name=\"broadlefDiameter\"\n                  value={broadleafCm}\n                  onChange={changeBroadleafCm}\n                />\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n      {sequestration && !isNaN(sequestration) && (!isNaN(coniferNumber) || !isNaN(broadleafNumber)) && (\n        <div className='resultName'>\n            <div className=\"row\">\n            <p className='resultName'>Current COâ stock</p>\n            <p className='resultVal'>{Math.round(sum_c_stock)} kg</p>\n            </div>\n            <div className=\"row\">\n            <p className='resultName'>Additional simulated COâ stock</p>\n            <p className='resultVal'>{Math.round(co2Initial)} kg</p>\n            </div>\n            <div className=\"row\">\n            <p className='resultName'>Total simulated COâ stock</p>\n            <p className='resultVal'>{Math.round(sum_c_stock+co2Initial)} kg</p>\n            </div>\n            <div className=\"row\">\n            <p className='resultName'>Increase of COâ stock</p>\n            <p className='resultVal'>{Math.round(co2Initial/sum_c_stock * 100 *1000)/1000} %</p>\n            </div>\n            \n            <div className=\"row\">\n            <p className='resultName'>Current COâ sequestration</p>\n            <p className='resultVal'>{Math.round(sum_c_seq)} kg/y</p>\n             </div>\n            <div className=\"row\">\n            <p className='resultName'>Additional simulated COâ sequestration</p>\n            <p className='resultVal'>{Math.round(sequestration)} kg/y</p>\n            </div>\n            <div className=\"row\">\n            <p className='resultName'>Total simulated COâ sequestration</p>\n            <p className='resultVal'>{Math.round(sequestration+sum_c_seq)} kg/y</p>\n            </div>\n            <div className=\"row\">\n            <p className='resultName'>Increase of COâ sequestration</p>\n            <p className='resultVal'>{Math.round(sequestration/sum_c_seq*100*1000)/1000} %</p>\n            </div>\n        </div>\n      )}\n      <button className=\"blueButton\" onClick={\n          ()=>{onClose(); \n            setConiferNumber(0);\n            setBroadleafNumber(0);\n            setCo2Initial(0);\n            setConiferCm('');\n            setBroadleafCm('');\n            setSequestration(null);\n        }\n      }\n        >\n        Close\n      </button>\n    </div>\n  );\n};\nexport default Simulator;\n","import { useState } from \"react\";\nimport \"./App.css\";\nimport { MapContainer, TileLayer, GeoJSON } from \"react-leaflet\";\nimport data from \"./app_data/neighborhoods_madrid_stats.json\";\nimport Legend, { getColorForLegend } from \"./components/Legend\";\nimport Tooltip from \"./components/Tooltip\";\nimport Simulator from \"./components/Simulator\";\nimport legends from \"./static/legends\";\n\nconst madridCenter = [40.475, -3.7];\n\nconst App = () => {\n  const [legendValue, setLegendValue] = useState(\"sum_c_stock_n\");\n  const [tooltipVisible, setTooltipVisible] = useState(false);\n  const [properties, setProperties] = useState(null);\n  const [layerH, setLayerH] = useState(null);\n  const [simulatorVisible, setSimulatorVisible]= useState(false);\n\n  const left = tooltipVisible ? \"0px\" : \"-100%\";\n\n  const getStyle = (val, colorMap) => ({\n    fillColor: getColorForLegend(val, colorMap),\n    weight: 2,\n    opacity: 1,\n    color: \"white\",\n    dashArray: \"3\",\n    fillOpacity: 0.7,\n  });\n\n  return (\n    <div id=\"container\">\n      <div className=\"pageName\">MaTREEd - Tree Information System for Madrid neighborhoods</div>\n      <Legend legendValue={legendValue} setLegendValue={setLegendValue} />\n      <Tooltip\n        properties={properties}\n        style={{ left: left }}\n        closeTooltip={() => setTooltipVisible(false)}\n        openSimulator={()=>setSimulatorVisible(true)}\n      />\n      <Simulator \n      properties={properties}\n      visible={simulatorVisible} \n      onClose={()=>setSimulatorVisible(false)} />\n\n      <MapContainer\n        id=\"mapContainer\"\n        center={madridCenter}\n        zoom={11}\n        scrollWheelZoom={false}\n      >\n        <TileLayer\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        <GeoJSON\n          style={(feature) =>\n            getStyle(\n              feature.properties[legendValue],\n              legends?.[legendValue]?.colorMap\n            )\n          }\n          eventHandlers={{\n            click: async (e) => {\n              setProperties(e.layer.feature.properties);\n              setLayerH(e.layer.feature);\n              setTooltipVisible(true);\n            },\n          }}\n          key={\"madrid\" + legendValue}\n          data={data}\n        />\n        {tooltipVisible && layerH && (\n          <GeoJSON\n            pathOptions={{ color: \"red\" }}\n            key={layerH.properties.NOMBRE}\n            data={layerH}\n          />\n        )}\n      </MapContainer>\n    </div>\n  );\n};\n\nexport default App;\n","import { HashRouter, Route } from \"react-router-dom\";\nimport Viewer from \"./Viewer\";\n\nexport default function App() {\n  return (\n    <HashRouter basename=\"/\">\n      <Route exact path=\"/\" component={Viewer} />\n    </HashRouter>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}