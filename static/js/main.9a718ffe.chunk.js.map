{"version":3,"sources":["Viewer.js","Simulator.js","App.js","index.js"],"names":["madridCenter","Tooltip","closeTooltip","style","properties","perc_caducifolio","perc_perennifolio","tree_valid","tree_tot","especie_1","especie_1_perc","especie_2","especie_2_perc","especie_3","especie_3_perc","other_perc","sum_c_stock","sum_c_seq","NOMBRE","CODBARRIO","treeData","treeSpecies","carbonInfo","Math","round","className","map","name","val","onClick","Legend","legendValue","setLegendValue","legends","legendItem","find","item","backgroundColor","App","useState","tooltipVisible","setTooltipVisible","setProperties","layerH","setLayerH","left","id","to","MapContainer","center","zoom","scrollWheelZoom","TileLayer","attribution","url","GeoJSON","feature","fillColor","d","weight","opacity","color","dashArray","fillOpacity","getStyle","onEachFeature","layer","eventHandlers","click","e","a","console","log","data","pathOptions","Simulator","URLSearchParams","useLocation","search","get","currentJSON","setCurrentJSON","currentJSONRef","useRef","mapRef","useEffect","fileName","fetch","then","res","json","current","bounds","getBounds","fitBounds","MapConsumer","ref","basename","exact","path","component","Viewer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9a718ffe.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport { MapContainer, TileLayer, GeoJSON } from \"react-leaflet\";\nimport data from \"./app_data/neighborhoods_madrid_stats.json\";\nimport { Link } from \"react-router-dom\";\nconst madridCenter = [40.475, -3.7];\n\nconst Tooltip = ({ closeTooltip, style, properties }) => {\n  if (!properties) {\n    return null;\n  }\n  const {\n    perc_caducifolio,\n    perc_perennifolio,\n    tree_valid,\n    tree_tot,\n    especie_1,\n    especie_1_perc,\n    especie_2,\n    especie_2_perc,\n    especie_3,\n    especie_3_perc,\n    other_perc,\n    sum_c_stock,\n    sum_c_seq,\n    CODBARRIO,\n    NOMBRE\n  } = properties;\n\n  const treeData = [\n    [\"TREES COUNT\", tree_tot],\n    [\"VALID TREE RECORDS\", tree_valid + \"%\"],\n    [\"EVERGREEN\", perc_perennifolio + \"%\"],\n    [\"DECIDUOUS\", perc_caducifolio + \"%\"]\n  ];\n\n  const treeSpecies = [\n    [especie_1, especie_1_perc],\n    [especie_2, especie_2_perc],\n    [especie_3, especie_3_perc],\n    [\"others\", other_perc]\n  ];\n\n  const carbonInfo = [\n    [\"CO2 stock \", Math.round(sum_c_stock * 100) / 100 + \" Kg\"],\n    [\"CO2 sequestration\", Math.round(sum_c_seq * 100) / 100 + \" Kg/y\"]\n  ];\n  return (\n    <div style={style} className=\"tooltip\">\n      <div className=\"singleRow\">\n        <p>{NOMBRE}</p>\n      </div>\n      {treeData.map(([name, val]) => (\n        <div className=\"row\">\n          <p>{name}</p>\n          <p>{val}</p>\n        </div>\n      ))}\n      <div className=\"singleRow\">\n        <p>TREE SPECIES</p>\n      </div>\n      {treeSpecies.map(([name, val]) => (\n        <div className=\"row\">\n          <p>{name}</p>\n          <p>{val}%</p>\n        </div>\n      ))}\n      <div className=\"singleRow\">\n        <p>CO2 PERFORMANCE</p>\n      </div>\n      {carbonInfo.map(([name, val]) => (\n        <div className=\"row\">\n          <p>{name}</p>\n          <p>{val}</p>\n        </div>\n      ))}\n      {/* <Link to={`/simulator?id=${CODBARRIO}`}>\n      <button className='blueButton goToSimulator'>View in Simulator</button>\n    </Link> */}\n      <button className=\"blueButton closeButton\" onClick={closeTooltip}>\n        Close\n      </button>\n    </div>\n  );\n};\n\nconst Legend = ({ legendValue, setLegendValue }) => {\n  //   Titolo Mappa (nome campo)\n\n  const legends = [\n    // [\"Trees density [trees/Km2]\", \"tot_trees_n\"],\n    // [\"Mean trees trunk perimeter [m]\", \"avg_perimetro\"],\n    // [\"Mean trees height [m]\", \"avg_altura\"],\n    // [\"Mean trees canopy diameter [m]\", \"avg_diametro_copa\"],\n    // [\"Trees canopy coverage [area %]\", \"tree_cover\"],\n    [\"CO2 stock [Kg/Km2]\", \"sum_c_stock\"],\n    [\"CO2 sequestration [Kg/y/Km2]\", \"sum_c_stock_n\"]\n  ];\n\n\n  const legendItem = legends.find(item=>item[1]===legendValue)\n\n  return (\n    <div className=\"legendContainer\">\n      <p>Legend - {legendItem?.[0]} </p>\n      <p>\n        <div className='legendVal'>> 200000</div>\n        <div className='legendColor'\n          style={{ backgroundColor: \"#800026\" }}\n        />\n      </p>\n      <p>\n        <div className='legendVal'>> 250000</div>\n        <div className='legendColor'\n          style={{ backgroundColor: \"#BD0026\" }}\n        />\n      </p>\n      <p>\n      <div className='legendVal'>> 200000</div>\n      <div className='legendColor'\n       style={{ backgroundColor: \"#E31A1C\" }} />\n      </p>\n      <p>\n        <div className='legendVal'>> 100000</div>\n        <div className='legendColor'\n          style={{ backgroundColor: \"#FC4E2A\" }}\n        />\n      </p>\n      <p>\n        <div className='legendVal'>> 50000</div>\n        <div className='legendColor'\n          style={{ backgroundColor: \"#FD8D3C\" }}\n        />\n      </p>\n      <p>\n        <div className='legendVal'>> 20000</div>\n        <div className='legendColor'\n          style={{ backgroundColor: \"#FEB24C\" }}\n        />\n      </p>\n      <p>\n        <div className='legendVal'>0-20000</div>\n        <div className='legendColor'\n          style={{ backgroundColor: \"#FED976\" }}\n        />\n      </p>\n      <div>Other legends</div>\n      {legends.map(item=> item[1]!==legendValue &&  (\n        <div className='otherLegend' onClick={()=>setLegendValue(item[1])}>\n          {item[0]}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nfunction getColor(d) {\n  return d > 300000\n    ? \"#800026\"\n    : d > 200000\n    ? \"#BD0026\"\n    : d > 250000\n    ? \"#E31A1C\"\n    : d > 200000\n    ? \"#FC4E2A\"\n    : d > 100000\n    ? \"#FD8D3C\"\n    : d > 50000\n    ? \"#FEB24C\"\n    : d > 20000\n    ? \"#FED976\"\n    : \"#FFEDA0\";\n}\n\nconst App = () => {\n  const [legendValue, setLegendValue] = useState(\"sum_c_stock\");\n  const [tooltipVisible, setTooltipVisible] = useState(false);\n  const [properties, setProperties] = useState(null);\n  const [layerH, setLayerH] = useState(null);\n  const left = tooltipVisible ? \"0px\" : \"-100%\";\n\n  const getStyle = ( val) =>({\n    fillColor: getColor(val),\n        weight: 2,\n        opacity: 1,\n        color: \"white\",\n        dashArray: \"3\",\n        fillOpacity: 0.7\n  })\n\n  return (\n    <div id=\"container\">\n      <div className=\"pageName\">\n        MaTREEd Viewer\n        <Link to=\"/simulator\">\n          <button className=\"blueButton linkButton\">Go to Simulator</button>\n        </Link>\n      </div>\n      <Legend legendValue={legendValue} setLegendValue={setLegendValue} />\n      <Tooltip\n        properties={properties}\n        style={{ left: left }}\n        closeTooltip={() => setTooltipVisible(false)}\n      />\n\n      <MapContainer\n        id=\"mapContainer\"\n        center={madridCenter}\n        zoom={11}\n        scrollWheelZoom={false}\n      >\n        <TileLayer\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        <GeoJSON\n          style={feature=>getStyle(feature.properties[legendValue])}\n          onEachFeature={layer => {}}\n          eventHandlers={{\n            click: async e => {\n              console.log(\"marker clicked\", e.layer.feature);\n              setProperties(e.layer.feature.properties);\n              setLayerH(e.layer.feature);\n              setTooltipVisible(true);\n            }\n          }}\n          key={\"madrid\"+legendValue}\n          data={data}\n        />\n        {tooltipVisible && layerH && (\n          <GeoJSON\n            pathOptions={{ color: \"red\" }}\n            key={layerH.properties.NOMBRE}\n            data={layerH}\n          />\n        )}\n      </MapContainer>\n    </div>\n  );\n};\nexport default App;\n","import \"./App.css\";\nimport { MapContainer, TileLayer, GeoJSON, MapConsumer } from \"react-leaflet\";\nimport data from \"./app_data/neighborhoods_madrid_stats.json\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport { useEffect, useState, useRef } from \"react\";\n\nconst madridCenter = [40.475, -3.7];\n\nconst useQuery = () => {\n  return new URLSearchParams(useLocation().search);\n};\n\nconst Simulator = () => {\n  let query = useQuery();\n  const id = query.get(\"id\");\n  const [currentJSON, setCurrentJSON] = useState(data);\n  const currentJSONRef = useRef(null);\n  const mapRef = useRef(null);\n\n  useEffect(() => {\n    if (id) {\n      const fileName = `MaTREEd/app_data/trees_neighbours/T_CODBARRIO_${id}.json`;\n      console.log(fileName);\n      fetch(fileName)\n        .then(res => res.json())\n        .then(data => {\n          setCurrentJSON(data);\n          if (currentJSONRef.current) {\n            const bounds = currentJSONRef.current.getBounds();\n            console.log(bounds);\n            mapRef.current.fitBounds(bounds);\n          }\n        });\n    }\n  }, [id]);\n  return (\n    <div id=\"container\">\n      <div className=\"pageName\">\n        MaTREEd Simulator\n        <Link to=\"/\">\n          <button className=\"blueButton linkButton\">Go to Viewer</button>\n        </Link>\n      </div>\n      <MapContainer\n        id=\"mapContainer\"\n        center={madridCenter}\n        zoom={11}\n        scrollWheelZoom={false}\n      >\n        <MapConsumer>\n          {map => {\n            mapRef.current = map;\n            return (\n              <>\n                <TileLayer\n                  attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                  url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                />\n                <GeoJSON\n                  ref={currentJSONRef}\n                  onEachFeature={layer => {}}\n                  eventHandlers={{\n                    click: async e => {\n                      console.log(\n                        \"marker clicked\",\n                        e.layer?.feature?.properties?.CODBARRIO\n                      );\n\n                      const CODBARRIO = e.layer?.feature?.properties?.CODBARRIO;\n                      if (!CODBARRIO) {\n                        return;\n                      }\n                      const fileName = `MaTREEd/app_data/trees_neighbours/T_CODBARRIO_${CODBARRIO}.json`;\n\n                      fetch(fileName)\n                        .then(res => res.json())\n                        .then(data => {\n                          setCurrentJSON(data);\n                          if (currentJSONRef.current) {\n                            const bounds = currentJSONRef.current.getBounds();\n                            console.log(bounds);\n                            map.fitBounds(bounds);\n                          }\n                        });\n                    }\n                  }}\n                  key={currentJSON.name}\n                  data={currentJSON}\n                />\n              </>\n            );\n          }}\n        </MapConsumer>\n      </MapContainer>\n    </div>\n  );\n};\nexport default Simulator;\n","import { HashRouter, Route } from \"react-router-dom\";\nimport Viewer from \"./Viewer\";\nimport Simulator from \"./Simulator\";\n\nexport default function App() {\n  return (\n    <HashRouter basename=\"/\">\n      <Route exact path=\"/\" component={Viewer} />\n      <Route path=\"/simulator\" component={Simulator} />\n    </HashRouter>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}